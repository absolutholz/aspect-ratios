const iconfont = require('gulp-iconfont');
const fs = require('fs');

const { gulp, notify, size } = require('../common-packages');

const ICONFONT_OPTIONS = {
	fontName: 'iconfont',
	formats: ['woff', 'woff2'],
	appendCodepoints: true,
	appendUnicode: false,
	normalize: true,
	fontHeight: 1000,
	centerHorizontally: false,
	// fixedWidth: true
};

function generateSCSS(glyphs, options, fontName, fontPath, scssFilePath) {
	let sContentSCSS = '/*\nThis file is automatically generated.\nAny changes to this file will be overwritten when the corresponding task is run again.\n*/\n\n';

	sContentSCSS += `$icon-typography-family: "${fontName}";\n`;
	sContentSCSS += `$icon-typography-path: "${fontPath}";\n\n`;
	sContentSCSS += '$icon-map: (\n';

	for (let glyph of glyphs) {
		sContentSCSS += `\t\'${glyph.name}\': "\\${glyph.unicode[0].charCodeAt(0).toString(16)}",\n`;
	}

	sContentSCSS += ');\n';

	fs.writeFile(scssFilePath, sContentSCSS, (error) => {
		if (error) {
			return console.log(error);
		}
		console.log(`Iconfont Configuration created > ${scssFilePath}`);
		return scssFilePath;
	});
}

function font(sourceFiles, destinationDirectory, scssFilePath, iconfontOptions = ICONFONT_OPTIONS) {
	return gulp.src(sourceFiles)

		.pipe(iconfont(iconfontOptions))
		.on('glyphs', (glyphs, options) => {
			generateSCSS(glyphs, options, iconfontOptions, destinationDirectory, scssFilePath);
		})

		.pipe(size({ showFiles: true, title: 'IconFont Generated --->' })) // size before dest results in better output in the console
		.pipe(gulp.dest(destinationDirectory))
		.pipe(notify({ message: 'IconFont creation complete', onLast: true }));
}
font.description = 'Create SVG sprite from individual SVG files';
font.defaults = {
	ICONFONT_OPTIONS,
};

module.exports = font;
